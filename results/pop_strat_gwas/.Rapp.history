substr(PCA$ID,start=4,stop=NA)
?substr
substr(PCA$ID,start=4,stop=12)
substr(PCA$ID,start=6,stop=12)
substr(PCA$ID,start=6,stop=15)
substr(PCA$ID,start=6,stop=20)
ids=substr(PCA$ID,start=6,stop=20)#
#
# Read in clst table and fam file#
clst=read.table("../data/Euro.clst.txt")#
# The list of countries as ordered in the fam file#
clst_unord=clst$V3[match(ids,clst$V2)]#
#
plot(x,y,type="n")#
text(x,y,substr(clst_unord,1,2))
#
plot(PCA$PC1,PCA$PC2,type="n")#
text(PCA$PC1,PCA$PC2,substr(clst_unord,1,2))
plot(PCA$PC2,PCA$PC1,type="n",xlab="PC2",ylab="PC1")#
text(PCA$PC2,PCA$PC1,substr(clst_unord,1,2))
PCA=read.table("H938_Euro.LDprune.evals")
evals=read.table("H938_Euro.LDprune.evals")
eval=read.table("H938_Euro.LDprune.eval")
eval
eval[1]/sum(eval)
head(eval[1]/sum(eval))
plot(eval)
plot(1:length(eval),eval)
plot(1:length(eval$V1),eval$V1,xlab="PC",ylab="Eigenvalue")
setwd("../HWE/")
file1="H938.hwe"#
#
# Read in HWE table and compute counts and allele frequencies#
pop1.hwe<-read.table(file1,as.is=TRUE) #
names(pop1.hwe)<-c("chr","SNP.id","which.inds","a1","a2","genotype","obs.het","exp.het","HWE.pval")#
pop1.counts<-sapply(pop1.hwe$genotype,function(x){as.numeric(strsplit(x,"/")[[1]])})#
pop1.counts<-t(pop1.counts)#
pop1.tot.counts<-rowSums(pop1.counts)#
pop1.geno.freq<-pop1.counts/pop1.tot.counts#
pop1.allele.freq<-(pop1.geno.freq[,1]+.5*pop1.geno.freq[,2])
file1="H938.hwe_reduced"#
#
# Read in HWE table and compute counts and allele frequencies#
pop1.hwe<-read.table(file1,as.is=TRUE) #
names(pop1.hwe)<-c("chr","SNP.id","which.inds","a1","a2","genotype","obs.het","exp.het","HWE.pval")#
pop1.counts<-sapply(pop1.hwe$genotype,function(x){as.numeric(strsplit(x,"/")[[1]])})#
pop1.counts<-t(pop1.counts)#
pop1.tot.counts<-rowSums(pop1.counts)#
pop1.geno.freq<-pop1.counts/pop1.tot.counts#
pop1.allele.freq<-(pop1.geno.freq[,1]+.5*pop1.geno.freq[,2])
head(pop1.tot.counts)
hist(pop1.counts[pop1.tot.counts==938])
hist(pop1.counts[pop1.tot.counts==938],xlab="Minor allele count",#
ylab="# of SNPs")
hist(pop1.counts[pop1.tot.counts==938],xlab="Minor allele count",#
ylab="# of SNPs",main="Allele frequency spectra")
sum(pop1.tot.counts==938)
weight=1/seq(1,938)+1/(938-seq(1,938))
plot(weight)
weight=1/seq(1,938)+1/(938*2-seq(1,938))
plot(weight)
weight=1/(938*2-seq(1,938))
plot(weight)
sum(weight)
hist(pop1.counts[pop1.tot.counts==938],xlab="Minor allele count",#
ylab="# of SNPs",main="Allele frequency spectra")
lines(seq(1,938)m(1/seq(1,938)+1/(938*2-seq(1,938))) * S)
lines(seq(1,938)m(1/seq(1,938)+1/(938*2-seq(1,938))) * S)
lines(seq(1,938),(1/seq(1,938)+1/(938*2-seq(1,938))) * S)
S=sum(pop1.tot.counts==938)
lines(seq(1,938),(1/seq(1,938)+1/(938*2-seq(1,938))) * S)
n=938#
S=sum(pop1.tot.counts==n) # the total number of fully observed sites#
#
#
expectedAFS=(1/seq(1,n)+1/(n*2-seq(1,n))) * S/sum(1/seq(1,2*n-1))#
lines(seq(1,n),expectedAFS)
n=938#
# the total number of fully observed sites#
S=sum(pop1.tot.counts==n & pop1.counts>0)#
# Watterson's estimator of Theta#
thetaW=S/sum(1/seq(1,2*n-1))  #
#
# Expected AFS for a minor allele frequency spectrum #
expectedAFS=(1/seq(1,n)+1/(n*2-seq(1,n))) * Theta  #
#
lines(seq(1,n),expectedAFS)
# Layer in the expected number of counts.#
n=938#
# the total number of fully observed sites#
S=sum(pop1.tot.counts==n & pop1.counts>0)#
# Watterson's estimator of Theta#
thetaW=S/sum(1/seq(1,2*n-1))  #
#
# Expected AFS for a minor allele frequency spectrum #
expectedAFS=(1/seq(1,n)+1/(n*2-seq(1,n))) * thetaW  #
#
lines(seq(1,n),expectedAFS)
# Make the plot#
hist(pop1.counts[pop1.tot.counts==938],xlab="Minor allele count",#
ylab="# of SNPs",main="Allele frequency spectra")#
#
# Layer in the expected number of counts.#
n=938#
# the total number of fully observed sites#
S=sum(pop1.tot.counts==n & pop1.counts>0)#
# Watterson's estimator of Theta#
thetaW=S/sum(1/seq(1,2*n-1))  #
#
# Expected AFS for a minor allele frequency spectrum #
expectedAFS=(1/seq(1,n)+1/(n*2-seq(1,n))) * thetaW  #
#
lines(seq(1,n),expectedAFS)
# Make the plot filtering on fully observed data#
hist(pop1.counts[pop1.tot.counts==n],xlab="Minor allele count",#
ylab="# of SNPs",main="Allele frequency spectra",nbreaks=n)#
#
# Layer in the expected number of counts.#
# the total number of fully observed sites#
S=sum(pop1.tot.counts==n & pop1.counts>0)#
# Watterson's estimator of Theta#
thetaW=S/sum(1/seq(1,2*n-1))  #
#
# Expected AFS for a minor allele frequency spectrum #
expectedAFS=(1/seq(1,n)+1/(n*2-seq(1,n))) * thetaW  #
#
lines(seq(1,n),expectedAFS)
#
# Make the plot filtering on fully observed data#
hist(pop1.counts[pop1.tot.counts==n],xlab="Minor allele count",#
ylab="# of SNPs",main="Allele frequency spectra",breaks=n)#
#
# Layer in the expected number of counts.#
# the total number of fully observed sites#
S=sum(pop1.tot.counts==n & pop1.counts>0)#
# Watterson's estimator of Theta#
thetaW=S/sum(1/seq(1,2*n-1))  #
#
# Expected AFS for a minor allele frequency spectrum #
expectedAFS=(1/seq(1,n)+1/(n*2-seq(1,n))) * thetaW  #
#
lines(seq(1,n),expectedAFS)
# Flip allele counts so that we are sure have the minor allele#
pop1.counts.maf = min(pop1.counts,pop1.tot.counts-pop1.counts)#
#
# Set the number of individauls by looking at the sites w/ the most#
# observed data#
n=max(pop1.tot.counts)#
#
# Make the plot filtering on fully observed data#
hist(pop1.counts.maf[pop1.tot.counts==n],xlab="Minor allele count",#
ylab="# of SNPs",main="Allele frequency spectra",breaks=n)#
#
# Layer in the expected number of counts.#
# the total number of fully observed sites#
S=sum(pop1.tot.counts==n & pop1.counts.maf>0)#
# Watterson's estimator of Theta#
thetaW=S/sum(1/seq(1,2*n-1))  #
#
# Expected AFS for a minor allele frequency spectrum #
expectedAFS=(1/seq(1,n)+1/(n*2-seq(1,n))) * thetaW  #
#
lines(seq(1,n),expectedAFS)
pop1.counts.maf
min(pop1.counts)
?min
pop1.counts.maf = min(cbind(pop1.counts,pop1.tot.counts-pop1.counts))
head(pop1.counts.maf)
pop1.counts.maf = min(rbind(pop1.counts,pop1.tot.counts-pop1.counts))
head(pop1.counts.maf)
?min
pop1.counts.maf = pmin(cbind(pop1.counts,pop1.tot.counts-pop1.counts))
head(pop1.counts.maf)
pop1.counts.maf = pmin(rbind(pop1.counts,pop1.tot.counts-pop1.counts))
head(pop1.counts.maf)
tot.counts<-rowSums(pop1.counts)#
geno.freq<-counts/tot.counts#
allele.counts<-(2*geno.counts[,1]+1*geno.counts[,2])
names(hwe)<-c("chr","SNP.id","which.inds","a1","a2","genotype","obs.het","exp.het","HWE.pval")#
counts<-sapply(pop1.hwe$genotype,function(x){as.numeric(strsplit(x,"/")[[1]])})#
counts<-t(counts)#
tot.counts<-rowSums(pop1.counts)#
allele.counts<-(2*counts[,1]+counts[,2])#
#
# Flip allele counts so that we are sure have the minor allele#
counts.maf = min(cbind(allele.counts,2*tot.counts-allele.counts))
hwe<-read.table(file1,as.is=TRUE) #
names(hwe)<-c("chr","SNP.id","which.inds","a1","a2","genotype","obs.het","exp.het","HWE.pval")#
counts<-sapply(hwe$genotype,function(x){as.numeric(strsplit(x,"/")[[1]])})#
counts<-t(counts)#
tot.counts<-rowSums(pop1.counts)#
allele.counts<-(2*counts[,1]+counts[,2])#
#
# Flip allele counts so that we are sure have the minor allele#
counts.maf = min(cbind(allele.counts,2*tot.counts-allele.counts))
head(counts.maf)
counts.maf = pmin(cbind(allele.counts,2*tot.counts-allele.counts))
head(counts.maf)
dim(counts.maf)
head(cbind(allele.counts,2*tot.counts-allele.counts)))
head(cbind(allele.counts,2*tot.counts-allele.counts))
?pmin
head(pmin(t(cbind(allele.counts,2*tot.counts-allele.counts))))
pmin(t(cbind(allele.counts,2*tot.counts-allele.counts)))[,1:5]
options(width=120)
pmin(t(cbind(allele.counts,2*tot.counts-allele.counts)))[,1:5]
head(counts.maf)
counts.maf = allele.counts*(allele.counts<2*tot.counts-allele.counts)#
+2*tot.counts-allele.counts*(allele.counts<2*tot.counts-allele.counts)
max(counts.maf)
counts.maf = allele.counts*(allele.counts<2*tot.counts-allele.counts)#
+(2*tot.counts-allele.counts)*(allele.counts<2*tot.counts-allele.counts)
min(counts.maf)
max(counts.maf)
n=max(pop1.tot.counts)
n=max(tot.counts)
hist(counts.maf[tot.counts==n],xlab="Minor allele count",#
ylab="# of SNPs",main="Allele frequency spectra",breaks=n)
S=sum(tot.counts==n & counts.maf>0)#
# Watterson's estimator of Theta#
thetaW=S/sum(1/seq(1,2*n-1))
thetaW
expectedAFS=(1/seq(1,n)+1/(n*2-seq(1,n))) * thetaW  #
#
lines(seq(1,n),expectedAFS)
hist(counts.maf[tot.counts==n],xlab="Minor allele count",#
ylab="# of SNPs",main="Allele frequency spectra",breaks=n)#
#
# Layer in the expected number of counts.#
# the total number of fully observed sites#
S=sum(tot.counts==n & counts.maf>0)#
# Watterson's estimator of Theta#
thetaW=S/sum(1/seq(1,2*n-1))  #
#
# Expected AFS for a minor allele frequency spectrum #
expectedAFS=(1/seq(1,n)+1/(n*2-seq(1,n))) * thetaW  #
lines(seq(1,n),expectedAFS,col=2)
ls()
rm(ls())
rm(as.character(ls()))
rm(character(ls()))
?rm
rm(list=ls())
ls()
file1="H938_Italian.hwe_reduced"#
file2="H938_Orcadian.hwe_reduced"#
#
file1="H938_SardBasqItal.hwe_reduced"#
file2="H938_OrcadianFrench.hwe_reduced"#
#
# Extract pop1 MAF#
pop1.hwe<-read.table(file1,as.is=TRUE) #
names(pop1.hwe)<-c("chr","SNP.id","which.inds","a1","a2","genotype","obs.het","exp.het","HWE.pval")#
pop1.counts<-sapply(pop1.hwe$genotype,function(x){as.numeric(strsplit(x,"/")[[1]])})#
pop1.counts<-t(pop1.counts)#
pop1.tot.counts<-rowSums(pop1.counts)#
pop1.geno.freq<-pop1.counts/pop1.tot.counts#
pop1.allele.freq<-(pop1.geno.freq[,1]+.5*pop1.geno.freq[,2])#
#
# Extract pop2 MAF#
pop2.hwe<-read.table(file2,as.is=TRUE) #
names(pop2.hwe)<-c("chr","SNP.id","which.inds","a1","a2","genotype","obs.het","exp.het","HWE.pval")#
pop2.counts<-sapply(pop2.hwe$genotype,function(x){as.numeric(strsplit(x,"/")[[1]])})#
pop2.counts<-t(pop2.counts)#
pop2.tot.counts<-rowSums(pop2.counts)#
pop2.geno.freq<-pop2.counts/pop2.tot.counts#
pop2.allele.freq<-(pop2.geno.freq[,1]+.5*pop2.geno.freq[,2])#
#
# Note: we need to flip alleles because the minor allele in one pop#
# isn't necessarily the minor allele in another.#
pop2.allele.freq.flip=#
pop2.allele.freq*(pop1.hwe$a1==pop2.hwe$a1)+(1-pop2.allele.freq)*(pop1.hwe$a1!=pop2.hwe$a1)#
#
# Read in SNP positions table#
pos=read.table("H938_Euro_chr2.pos")#
#
# Calculate Fst w/ most basic version of F_{ST}: F_{ST} = Var(p) / (pbar*(1-pbar))#
pbar=(pop1.allele.freq+pop2.allele.freq)/2#
fst=(0.5*(pop1.allele.freq-pbar)^2+0.5*(pop2.allele.freq.flip-pbar)^2)/(pbar*(1-pbar))  #
#
# Plot of fst vs. position#
plot(pos$V4,fst,col=adjustcolor("black",0.1),pch=16,xlab="Position")#
#
# Identify the most extreme outlier#
pos[which.max(fst),]
setwd("../pop_diff_scan/")
file1="H938_Italian.hwe_reduced"#
file2="H938_Orcadian.hwe_reduced"#
#
file1="H938_SardBasqItal.hwe_reduced"#
file2="H938_OrcadianFrench.hwe_reduced"#
#
# Extract pop1 MAF#
pop1.hwe<-read.table(file1,as.is=TRUE) #
names(pop1.hwe)<-c("chr","SNP.id","which.inds","a1","a2","genotype","obs.het","exp.het","HWE.pval")#
pop1.counts<-sapply(pop1.hwe$genotype,function(x){as.numeric(strsplit(x,"/")[[1]])})#
pop1.counts<-t(pop1.counts)#
pop1.tot.counts<-rowSums(pop1.counts)#
pop1.geno.freq<-pop1.counts/pop1.tot.counts#
pop1.allele.freq<-(pop1.geno.freq[,1]+.5*pop1.geno.freq[,2])#
#
# Extract pop2 MAF#
pop2.hwe<-read.table(file2,as.is=TRUE) #
names(pop2.hwe)<-c("chr","SNP.id","which.inds","a1","a2","genotype","obs.het","exp.het","HWE.pval")#
pop2.counts<-sapply(pop2.hwe$genotype,function(x){as.numeric(strsplit(x,"/")[[1]])})#
pop2.counts<-t(pop2.counts)#
pop2.tot.counts<-rowSums(pop2.counts)#
pop2.geno.freq<-pop2.counts/pop2.tot.counts#
pop2.allele.freq<-(pop2.geno.freq[,1]+.5*pop2.geno.freq[,2])#
#
# Note: we need to flip alleles because the minor allele in one pop#
# isn't necessarily the minor allele in another.#
pop2.allele.freq.flip=#
pop2.allele.freq*(pop1.hwe$a1==pop2.hwe$a1)+(1-pop2.allele.freq)*(pop1.hwe$a1!=pop2.hwe$a1)#
#
# Read in SNP positions table#
pos=read.table("H938_Euro_chr2.pos")#
#
# Calculate Fst w/ most basic version of F_{ST}: F_{ST} = Var(p) / (pbar*(1-pbar))#
pbar=(pop1.allele.freq+pop2.allele.freq)/2#
fst=(0.5*(pop1.allele.freq-pbar)^2+0.5*(pop2.allele.freq.flip-pbar)^2)/(pbar*(1-pbar))  #
#
# Plot of fst vs. position#
plot(pos$V4,fst,col=adjustcolor("black",0.1),pch=16,xlab="Position")#
#
# Identify the most extreme outlier#
pos[which.max(fst),]
pop1.hwe[pop1.SNP.id=="rs10398067"]
pop1.hwe[pop1.SNP$id=="rs10398067"]
pop1.hwe[pop1$SNP.id=="rs10398067"]
pop1.hwe[pop1.hwe$SNP.id=="rs10398067"]
pop1.hwe[pop1.hwe$SNP.id=="rs10498067"]
pop1.hwe[pop1.hwe$SNP.id=="rs10498067",]
pop1.hwe[pop2.hwe$SNP.id=="rs10498067",]
pop2.hwe[pop2.hwe$SNP.id=="rs10498067",]
setwd("../pop_strat_gwas/")
pheno.base=read.table("pheno.base.txt")#
# Scale the base phenotype to mean 0, sd 1#
pheno.base.scale=scale(pheno$base$V3)#
# Add some environmental variance, #
pheno.sim=rnorm(1,mean=pheno.base$V3,sd=1)#
write.table(pheno.sim,"pheno.sim.txt",quote=FALSE,row.names=FALSE,col.names=FALSE)
pheno.base.scale
pheno.base.scale=scale(pheno.base$V3)#
# Add some environmental variance, #
pheno.sim=rnorm(1,mean=pheno.base$V3,sd=1)#
write.table(pheno.sim,"pheno.sim.txt",quote=FALSE,row.names=FALSE,col.names=FALSE)
pheno.base.scale
pheno.sim
pheno.sim=rnorm(length(pheno.base),mean=pheno.base$V3,sd=1)
write.table(pheno.sim,"pheno.sim.txt",quote=FALSE,row.names=FALSE,col.names=FALSE)
pheno.sim=rnorm(length(pheno.base$V3),mean=pheno.base$V3,sd=1)#
write.table(pheno.sim,"pheno.sim.txt",quote=FALSE,row.names=FALSE,col.names=FALSE)
pheno.sim
pheno.base
write.table(cbind(pheno.base[1:2,],pheno.sim),"pheno.sim.txt",quote=FALSE,row.names=FALSE,col.names=FALSE)
pheno.base[1:2,]
pheno.base[,1:2]
write.table(cbind(pheno.base[,1:2],pheno.sim),"pheno.sim.txt",quote=FALSE,row.names=FALSE,col.names=FALSE)
qassoc=read.table("H938_Euro_sim.pheno.qassoc",header=TRUE)
head(qassoc)
hist(qassoc$P)
plot(-log10(qassoc$P[-log10(qassoc$P)>3]))
plot(-log10(qassoc$P[-log10(qassoc$P)>3]),col=adjustcolor(qassoc$CHR,0.1))
5%%2
adjustcolor(1,0.2)
adjustcolor(2,0.2)
plot(-log10(qassoc$P[-log10(qassoc$P)>3]),col=adjustcolor(qassoc$CHR%%2,0.5))
plot(-log10(qassoc$P[-log10(qassoc$P)>3]),col=qassoc$CHR%%2)
head(qassoc$CHR)
head(qassoc$CHR%%2)
length(qassoc)
dim(qassoc)
plot(-log10(qassoc$P[-log10(qassoc$P)>3]),col=qassoc[-log10(qassoc$P)>3]$CHR%%2)
plot(-log10(qassoc$P[-log10(qassoc$P)>3]),col=qassoc[-log10(qassoc$P)>3,"CHR"]%%2)
plot(-log10(qassoc$P[-log10(qassoc$P)>3]),col=1+qassoc[-log10(qassoc$P)>3,"CHR"]%%2)
plot(-log10(qassoc$P[-log10(qassoc$P)>3]),col=1+qassoc[-log10(qassoc$P)>3,"CHR"]%%2,pch=16)
max(qassoc$POS)
max(qassoc$BP)
?which
plot(1:length(qassoc$CHR),type="n",xlab="SNP index",ylab="-log10(p-value)")#
points(which(-log10(qassoc$P)>3),-log10(qassoc$P[-log10(qassoc$P)>3]),col=1+qassoc[-log10(qassoc$P)>3,"CHR"]%%2,pch=16)
plot(1:length(qassoc$CHR),type="n",xlab="SNP index",ylab="-log10(p-value)")#
plot.these=which(-log10(qassoc$P)>3)#
points(plot.these,-log10(qassoc$P[plot.these]),col=1+qassoc[plot.these,"CHR"]%%2,pch=16)
plot(1:length(qassoc$CHR),type="n",xlab="SNP index",ylab="-log10(p-value)",ylim=c(1,max(-log10(qassoc$P))+1)#
plot.these=which(-log10(qassoc$P)>3)#
points(plot.these,-log10(qassoc$P[plot.these]),col=1+qassoc[plot.these,"CHR"]%%2,pch=16)
plot(1:length(qassoc$CHR),type="n",xlab="SNP index",ylab="-log10(p-value)",ylim=c(1,max(-log10(qassoc$P))+1))#
plot.these=which(-log10(qassoc$P)>3)
points(plot.these,-log10(qassoc$P[plot.these]),col=1+qassoc[plot.these,"CHR"]%%2,pch=16)
plot(1:length(qassoc$CHR),type="n",xlab="SNP index",ylab="-log10(p-value)",ylim=c(1,max(-log10(qassoc$P),na.rm=TRUE)+1))#
plot.these=which(-log10(qassoc$P)>3)#
points(plot.these,-log10(qassoc$P[plot.these]),col=1+qassoc[plot.these,"CHR"]%%2,pch=16)
plot(1:length(qassoc$CHR),type="n",xlab="SNP index",ylab="-log10(p-value)",ylim=c(3,max(-log10(qassoc$P),na.rm=TRUE)+1))#
plot.these=which(-log10(qassoc$P)>3)#
points(plot.these,-log10(qassoc$P[plot.these]),col=1+qassoc[plot.these,"CHR"]%%2,pch=16)
abline(h=8,lty=2,col="gray")
length(qassoc$CHR)
.05/length(qassoc$CHR)
log10(.05/length(qassoc$CHR))
head(qassoc)
plot(1:length(qassoc$SNP),type="n",xlab="SNP index",ylab="-log10(p-value)",ylim=c(3,max(-log10(qassoc$P),na.rm=TRUE)+1))#
plot.these=which(-log10(qassoc$P)>3)#
points(plot.these,-log10(qassoc$P[plot.these]),col=1+qassoc[plot.these,"CHR"]%%2,pch=16)#
# Put in a line for a Bonferroni correction (0.05 / length(qassoc$SNP)#
abline(h=-log10(0.05/length(qassoc$SNP)),lty=2,col="gray")
head(order(qassoc$P))
qassoc[339216,]
qassoc[head(order(qassoc$P)),]
?head
print(qassoc[head(order(qassoc$P)),],n=20)
print(qassoc[head(order(qassoc$P),n=20),])
qassoc=read.table("H938_Euro_sim.pheno.qassoc",header=TRUE)#
logUnif=-log10(seq(0,1,length=length(qassoc$SNP)))#
logUnifOrder=order(logUnif)#
SNPorder=order(qassoc$P)#
plot(logUnif[logUnifOrder],-log10(qassoc$P[SNPorder]),pch=16,cex=0.5,xlab="-log(p)#
Expected",ylab="-log(p) Observed",,ylim=c(0,qmax));#
abline(0,1);#
abline(8,0,lty=3);
qmax=max(-log10(qassoc$P),na.rm=TRUE)#
plot(logUnif[logUnifOrder],-log10(qassoc$P[SNPorder]),pch=16,cex=0.5,xlab="-log(p)#
Expected",ylab="-log(p) Observed",,ylim=c(0,qmax));#
abline(0,1);#
abline(8,0,lty=3);
head(logUnif[logUnifOrder])
head(-log10(qassoc$P[SNPorder]))
SNPorder=order(-log10(qassoc$P))#
qmax=max(-log10(qassoc$P),na.rm=TRUE)
length(SNPorder)
plot(logUnif[logUnifOrder][-(1:350e3],-log10(qassoc$P[SNPorder][-(1:350e3]),pch=16,cex=0.5,xlab="-log(p)#
Expected",ylab="-log(p) Observed",,ylim=c(0,qmax));
plot(logUnif[logUnifOrder][-(1:350e3)],-log10(qassoc$P[SNPorder][-(1:350e3)],pch=16,cex=0.5,xlab="-log(p)#
Expected",ylab="-log(p) Observed",,ylim=c(0,qmax));
plot(logUnif[logUnifOrder][-(1:350e3)],-log10(qassoc$P[SNPorder][-(1:350e3)],pch=16,cex=0.5,xlab="-log(p) Expected",ylab="-log(p) Observed",,ylim=c(0,qmax));
plot(logUnif[logUnifOrder][-(1:350e3)],-log10(qassoc$P[SNPorder][-(1:350e3)],pch=16,cex=0.5,xlab="-log(p) Expected",ylab="-log(p) Observed",ylim=c(0,qmax));
plot(logUnif[logUnifOrder][-(1:350e3)],-log10(qassoc$P[SNPorder][-(1:350e3)],pch=16,cex=0.5,xlab="-log(p) Expected",ylab="-log(p) Observed",,ylim=c(0,qmax));
plot(logUnif[logUnifOrder][-(1:350e3)],-log10(qassoc$P[SNPorder][-(1:350e3)],pch=16,cex=0.5,xlab="-log(p) Expected",ylab="-log(p) Observed",ylim=c(0,qmax));
plot(logUnif[logUnifOrder][-(1:350e3)],-log10(qassoc$P[SNPorder][-(1:350e3)],pch=16,cex=0.5,xlab="-log(p) Expected",ylab="-log(p) Observed",ylim=c(0,qmax));
plot(logUnif[logUnifOrder][-(1:350e3)],-log10(qassoc$P[SNPorder][-(1:350e3)],pch=16,cex=0.5,xlab="-log(p) Expected",ylab="-log(p) Observed",ylim=c(0,qmax));
plot(logUnif[logUnifOrder][-(1:350e3)],-log10(qassoc$P[SNPorder][-(1:350e3)]),pch=16,cex=0.5,xlab="-log(p) Expected",ylab="-log(p) Observed",ylim=c(0,qmax));
summary(qassoc$P)
summary(-log10(qassoc$P))
summary(-log10(logUnif))
summary(-logUnif)
summary(logUnif)
Unif=seq(0,1,length=length(qassoc$SNP))#
logUnifOrder=order(-log10(Unif))#
SNPorder=order(-log10(qassoc$P))#
qmax=max(-log10(qassoc$P),na.rm=TRUE)
head(Unif[logUnifOrder])
head(qassoc$P[SNPOrder])
head(qassoc$P[SNPorder])
?oder
?order
qassoc=read.table("H938_Euro_sim.pheno.qassoc",header=TRUE)#
Unif=seq(0,1,length=length(qassoc$SNP))#
logUnifOrder=order(-log10(Unif),decreasing=TRUE)#
SNPorder=order(-log10(qassoc$P),decreasing=TRUE)#
qmax=max(-log10(qassoc$P),na.rm=TRUE)#
plot(-log10(Unif[logUnifOrder][1:20e3]),-log10(qassoc$P[SNPorder][1:20e3]),pch=16,cex=0.5,xlab="-log(p)#
Expected",ylab="-log(p) Observed",,ylim=c(0,qmax));#
abline(0,1);#
abline(8,0,lty=3);
plot(-log10(Unif[logUnifOrder][1:100e3]),-log10(qassoc$P[SNPorder][1:100e3]),pch=16,cex=0.5,xlab="-log(p)#
Expected",ylab="-log(p) Observed",,ylim=c(0,qmax));#
abline(0,1);#
abline(8,0,lty=3);
print(qassoc[head(order(qassoc$P),n=20),])
setwd("../admixture/")
Q=read.table("H938_Euro.LDprune.6.Q")#
Qmat=as.matrix(Q)#
barplot(t(Qmat),col=c("red","blue","gold","orange","purple","brown"),border=NA,space=0,inside=TRUE)
Q=read.table("H938_Euro.LDprune.6.Q")#
Qmat=as.matrix(Q)#
barplot(t(Qmat),col=c("red","blue","gold","orange","purple","brown"),border=NA,space=0)
clst=read.table("../../data/Euro.clst.txt")#
fam=read.table("../../data/H938_Euro.LDprune.fam")#
#
# The list of countries as ordered in the fam file#
clst_unord=clst$V3[match(fam$V2,clst$V2)]#
# Re-order alphabetically #
ordered_indices=order(clst_unord)#
QmatO=Qmat[ordered_indices,]#
#
# Compute where we will place the population labels in the barplot#
n=length(ordered_indices)#
clst_ord=clst_unord[ordered_indices]#
breaks=c(0,which(clst_ord[1:(n-1)]!=clst_ord[2:n]),n)#
nbrks=length(breaks)#
midpts=(breaks[1:(nbrks-1)]+breaks[2:nbrks])/2#
#
# Make the barplot#
barplot(t(QmatO),col=c("red","blue","yellow","orange","purple","brown"),border=NA,space=0,inside=TRUE)#
abline(v=breaks,lwd=2)#
mtext(levels(idsO),side=1,at=midpts,las=2)
mtext(levels(clst_ord),side=1,at=midpts,las=2)
Q=read.table("H938_Euro.LDprune.6.Q")#
Qmat=as.matrix(Q)#
barplot(t(Qmat),col=c("red","blue","gold","orange","purple","brown"),border=NA,space=0)
setwd("../pca/")
# Read in eigenvectors file#
PCA=read.table("H938_Euro.LDprune.eigs")#
names(PCA)=c("ID",paste("PC",(1:20),sep=""),"CaseControl")#
#
# Note smartpca pushes the plink family and individual ids together so#
# we need to extract out the ids afresh; note this code works just for#
# this case#
ids=substr(PCA$ID,start=6,stop=20)#
#
# Read in clst table and fam file#
clst=read.table("../../data/Euro.clst.txt")#
# The list of countries as ordered in the fam file#
clst_unord=clst$V3[match(ids,clst$V2)]#
#
# Make a blank plot of the right size#
plot(PCA$PC2,PCA$PC1,type="n",xlab="PC2",ylab="PC1")#
# Add text labels at PC positions with abbreviations of the full#
# labels.  The substr function will be used to make automatic abbreviations.#
text(PCA$PC2,PCA$PC1,substr(clst_unord,1,2))
eval=read.table("H938_Euro.LDprune.eval")#
plot(1:length(eval$V1),eval$V1/sum(eval$V1),xlab="PC",ylab="Prop of variation explained")
eval=read.table("H938_Euro.LDprune.eval")#
plot(1:length(eval$V1),eval$V1/sum(eval$V1),xlab="PC",ylab="Prop of variation explained",pch=16)
plot(PCA$PC3,PCA$PC1,type="n",xlab="PC3",ylab="PC1")#
# Add text labels at PC positions with abbreviations of the full#
# labels.  The substr function will be used to make automatic abbreviations.#
text(PCA$PC3,PCA$PC1,substr(clst_unord,1,2))
plot(PCA$PC4,PCA$PC1,type="n",xlab="PC4",ylab="PC1")#
# Add text labels at PC positions with abbreviations of the full#
# labels.  The substr function will be used to make automatic abbreviations.#
text(PCA$PC4,PCA$PC1,substr(clst_unord,1,2))
plot(PCA$PC3,PCA$PC4,type="n",xlab="PC3",ylab="PC4")#
# Add text labels at PC positions with abbreviations of the full#
# labels.  The substr function will be used to make automatic abbreviations.#
text(PCA$PC3,PCA$PC4,substr(clst_unord,1,2))
plot(PCA$PC5,PCA$PC6,type="n",xlab="PC5",ylab="PC6")#
# Add text labels at PC positions with abbreviations of the full#
# labels.  The substr function will be used to make automatic abbreviations.#
text(PCA$PC5,PCA$PC6,substr(clst_unord,1,2))
plot(PCA$PC6,PCA$PC7,type="n",xlab="PC6",ylab="PC7")#
# Add text labels at PC positions with abbreviations of the full#
# labels.  The substr function will be used to make automatic abbreviations.#
text(PCA$PC6,PCA$PC7,substr(clst_unord,1,2))
setwd("../pop_strat_gwas/")
# Read in the p-values#
qassoc=read.table("H938_Euro_sim.pheno.qassoc",header=TRUE)#
# Produce expected p-values from the null (i.e. perfectly uniformly#
# distributed).#
nTests=length(qassoc$SNP)#
Unif=seq(1/nTests,1-1/nTests,length=nTests)#
# Sort the -log10 p-values (i.e. match on quantile)#
logUnifOrder=order(-log10(Unif),decreasing=TRUE)#
SNPorder=order(-log10(qassoc$P),decreasing=TRUE)#
# Plot the p-values against against each other (Note: we do for only#
# the top 150K SNPs to make the number of points plotted smaller)#
qmax=max(-log10(qassoc$P),na.rm=TRUE)#
plot(-log10(Unif[logUnifOrder][1:150e3]),-log10(qassoc$P[SNPorder][1:150e3]),pch=16,cex=0.5,xlab="-log(p)#
Expected",ylab="-log(p) Observed",,ylim=c(0,qmax));#
# put in a line for the expected relationship (y=x)#
abline(0,1);#
# Put in a line for a Bonferroni correction (0.05 / length(qassoc$SNP)#
abline(h=-log10(0.05/length(qassoc$SNP)),lty=2,col="gray")
png("qqplot.plot1.png")
plot(-log10(Unif[logUnifOrder][1:150e3]),-log10(qassoc$P[SNPorder][1:150e3]),pch=16,cex=0.5,xlab="-log(p)#
Expected",ylab="-log(p) Observed",,ylim=c(0,qmax));#
# put in a line for the expected relationship (y=x)#
abline(0,1);#
# Put in a line for a Bonferroni correction (0.05 / length(qassoc$SNP)#
abline(h=-log10(0.05/length(qassoc$SNP)),lty=2,col="gray")
dev.off()
plot(1:length(qassoc$SNP),type="n",xlab="SNP index",ylab="-log10(p-value)",ylim=c(3,max(-log10(qassoc$P),na.rm=TRUE)+1)) # Next add the points (note: we only plot points with # -log10(p-value)>3 to minimze the number of points plotted) plot.these=which(-log10(qassoc$P)>3) points(plot.these,-log10(qassoc$P[plot.these]),col=1+qassoc[plot.these,"CHR"]%%2,pch=16)#
# Put in a line for a Bonferroni correction (0.05 / length(qassoc$SNP)abline(h=-log10(0.05/length(qassoc$SNP)),lty=2,col="gray")Inspect a table of the most extreme hits:print(qassoc[head(order(qassoc$P),n=20),])6.5 Follow-up1. Which chromosomes locations would you be tempted to follow up here? 2. The peak on chromosome 6 near with what famous region? 3. The peak on chromosome 4 spans the gene for TLR6, a toll-like receptor involved in bacterialrecognition that was noted as being highly differentied in Europe (i.e. high FST) by Pickrell et al (2009) in their analysis of HGDP. Why might a highly differentiated SNP show a stronger signal of spurious association than other SNPs?
plot(1:length(qassoc$SNP),type="n",xlab="SNP index",ylab="-log10(p-value)",ylim=c(3,max(-log10(qassoc$P),na.rm=TRUE)+1))
plot.these=which(-log10(qassoc$P)>3) points(plot.these,-log10(qassoc$P[plot.these]),col=1+qassoc[plot.these,"CHR"]%%2,pch=16)
plot.these=which(-log10(qassoc$P)>3)
points(plot.these,-log10(qassoc$P[plot.these]),col=1+qassoc[plot.these,"CHR"]%%2,pch=16)
abline(h=-log10(0.05/length(qassoc$SNP)),lty=2,col="gray")
?png
png("manhattan_plot.png",width=1000)
plot(1:length(qassoc$SNP),type="n",xlab="SNP index",ylab="-log10(p-value)",ylim=c(3,max(-log10(qassoc$P),na.rm=TRUE)+1))
points(plot.these,-log10(qassoc$P[plot.these]),col=1+qassoc[plot.these,"CHR"]%%2,pch=16)
abline(h=-log10(0.05/length(qassoc$SNP)),lty=2,col="gray")
dev.off()
setwd("../results/afs")
file="../hwe/H938.hwe_reduced"
# Read in the HWE table and compute counts and allele frequencies#
hwe<-read.table(file,as.is=TRUE) #
names(hwe)<-c("chr","SNP.id","which.inds","a1","a2","genotype","obs.het","exp.het","HWE.pval")#
counts<-sapply(hwe$genotype,function(x){as.numeric(strsplit(x,"/")[[1]])})#
counts<-t(counts)#
tot.counts<-rowSums(pop1.counts)#
allele.counts<-(2*counts[,1]+counts[,2])#
#
# Flip allele counts so that we are sure we always have the minor#
# allele frequency#
# (Note: this uses a trick based on boolean math where true/false = 1/0). #
counts.maf = allele.counts*(allele.counts<2*tot.counts-allele.counts)#
+(2*tot.counts-allele.counts)*(allele.counts<2*tot.counts-allele.counts)#
#
# Set the number of individuals by looking at the sites w/ the most#
# observed data#
n=max(tot.counts)#
#
# Make the plot but filter on using only sites with fully observed#
# data (i.e. totcounts==n)#
hist(counts.maf[tot.counts==n],xlab="Minor allele count",#
ylab="# of SNPs",main="Allele frequency spectra",breaks=n)#
#
# Plot the expected minor allele frequency spectra for the standard#
# neutral model (i.e. constant size population, all loci neutral)#
# To do so we compute, Watterson's estimator of Theta#
S=sum(tot.counts==n & counts.maf>0)#
thetaW=S/sum(1/seq(1,2*n-1))  #
# Which determines the expected AFS#
expectedAFS=(1/seq(1,n)+1/(n*2-seq(1,n))) * thetaW  #
# And then plot#
lines(seq(1,n),expectedAFS,col=2)#
# Note: This adds a red line displaying the expected AFS shape#
# controlled to match the data w.r.t to Watterson's Theta (i.e. the total number of SNPs).
hist(counts.maf[tot.counts==n],xlab="Minor allele count",#
ylab="# of SNPs",main="Allele frequency spectra",breaks=n)
?
rm
rm(list=ls())
# Read in the HWE table and compute counts and allele frequencies#
hwe<-read.table(file,as.is=TRUE) #
names(hwe)<-c("chr","SNP.id","which.inds","a1","a2","genotype","obs.het","exp.het","HWE.pval")#
counts<-sapply(hwe$genotype,function(x){as.numeric(strsplit(x,"/")[[1]])})#
counts<-t(counts)#
tot.counts<-rowSums(pop1.counts)#
allele.counts<-(2*counts[,1]+counts[,2])#
#
# Flip allele counts so that we are sure we always have the minor#
# allele frequency#
# (Note: this uses a trick based on boolean math where true/false = 1/0). #
counts.maf = allele.counts*(allele.counts<2*tot.counts-allele.counts)#
+(2*tot.counts-allele.counts)*(allele.counts<2*tot.counts-allele.counts)#
#
# Set the number of individuals by looking at the sites w/ the most#
# observed data#
n=max(tot.counts)#
#
# Make the plot but filter on using only sites with fully observed#
# data (i.e. totcounts==n)#
hist(counts.maf[tot.counts==n],xlab="Minor allele count",#
ylab="# of SNPs",main="Allele frequency spectra",breaks=n)#
#
# Plot the expected minor allele frequency spectra for the standard#
# neutral model (i.e. constant size population, all loci neutral)#
# To do so we compute, Watterson's estimator of Theta#
S=sum(tot.counts==n & counts.maf>0)#
thetaW=S/sum(1/seq(1,2*n-1))  #
# Which determines the expected AFS#
expectedAFS=(1/seq(1,n)+1/(n*2-seq(1,n))) * thetaW  #
# And then plot#
lines(seq(1,n),expectedAFS,col=2)#
# Note: This adds a red line displaying the expected AFS shape#
# controlled to match the data w.r.t to Watterson's Theta (i.e. the total number of SNPs).
file="../hwe/H938.hwe_reduced"
# Read in the HWE table and compute counts and allele frequencies#
hwe<-read.table(file,as.is=TRUE) #
names(hwe)<-c("chr","SNP.id","which.inds","a1","a2","genotype","obs.het","exp.het","HWE.pval")#
counts<-sapply(hwe$genotype,function(x){as.numeric(strsplit(x,"/")[[1]])})#
counts<-t(counts)#
tot.counts<-rowSums(pop1.counts)#
allele.counts<-(2*counts[,1]+counts[,2])#
#
# Flip allele counts so that we are sure we always have the minor#
# allele frequency#
# (Note: this uses a trick based on boolean math where true/false = 1/0). #
counts.maf = allele.counts*(allele.counts<2*tot.counts-allele.counts)#
+(2*tot.counts-allele.counts)*(allele.counts<2*tot.counts-allele.counts)#
#
# Set the number of individuals by looking at the sites w/ the most#
# observed data#
n=max(tot.counts)#
#
# Make the plot but filter on using only sites with fully observed#
# data (i.e. totcounts==n)#
hist(counts.maf[tot.counts==n],xlab="Minor allele count",#
ylab="# of SNPs",main="Allele frequency spectra",breaks=n)#
#
# Plot the expected minor allele frequency spectra for the standard#
# neutral model (i.e. constant size population, all loci neutral)#
# To do so we compute, Watterson's estimator of Theta#
S=sum(tot.counts==n & counts.maf>0)#
thetaW=S/sum(1/seq(1,2*n-1))  #
# Which determines the expected AFS#
expectedAFS=(1/seq(1,n)+1/(n*2-seq(1,n))) * thetaW  #
# And then plot#
lines(seq(1,n),expectedAFS,col=2)#
# Note: This adds a red line displaying the expected AFS shape#
# controlled to match the data w.r.t to Watterson's Theta (i.e. the total number of SNPs).
names(hwe)<-c("chr","SNP.id","which.inds","a1","a2","genotype","obs.het","exp.het","HWE.pval")#
counts<-sapply(hwe$genotype,function(x){as.numeric(strsplit(x,"/")[[1]])})#
counts<-t(counts)#
tot.counts<-rowSums(counts)#
allele.counts<-(2*counts[,1]+counts[,2])
counts.maf = allele.counts*(allele.counts<2*tot.counts-allele.counts)#
+(2*tot.counts-allele.counts)*(allele.counts<2*tot.counts-allele.counts)
n=max(tot.counts)#
#
# Make the plot but filter on using only sites with fully observed#
# data (i.e. totcounts==n)#
hist(counts.maf[tot.counts==n],xlab="Minor allele count",#
ylab="# of SNPs",main="Allele frequency spectra",breaks=n)#
#
# Plot the expected minor allele frequency spectra for the standard#
# neutral model (i.e. constant size population, all loci neutral)#
# To do so we compute, Watterson's estimator of Theta#
S=sum(tot.counts==n & counts.maf>0)#
thetaW=S/sum(1/seq(1,2*n-1))  #
# Which determines the expected AFS#
expectedAFS=(1/seq(1,n)+1/(n*2-seq(1,n))) * thetaW  #
# And then plot#
lines(seq(1,n),expectedAFS,col=2)
setwd("../afs/")
png("afs.png",width=1000)
n=max(tot.counts)#
#
# Make the plot but filter on using only sites with fully observed#
# data (i.e. totcounts==n)#
hist(counts.maf[tot.counts==n],xlab="Minor allele count",#
ylab="# of SNPs",main="Allele frequency spectra",breaks=n)#
#
# Plot the expected minor allele frequency spectra for the standard#
# neutral model (i.e. constant size population, all loci neutral)#
# To do so we compute, Watterson's estimator of Theta#
S=sum(tot.counts==n & counts.maf>0)#
thetaW=S/sum(1/seq(1,2*n-1))  #
# Which determines the expected AFS#
expectedAFS=(1/seq(1,n)+1/(n*2-seq(1,n))) * thetaW  #
# And then plot#
lines(seq(1,n),expectedAFS,col=2)
dev.off()
setwd("../hwe")
plot.geno.vs.HW<-function(file,title=""){#
#
#
      #read in the HW file from plink#
	plink.hwe<-read.table(file,as.is=TRUE) #
#
      names(plink.hwe)<-c("chr","SNP.id","which.inds","a1","a2","genotype","obs.het","exp.het","HWE.pval")#
#
	counts<-sapply(plink.hwe$genotype,function(x){as.numeric(strsplit(x,"/")[[1]])})#
	counts<-t(counts)#
	tot.counts<-rowSums(counts)#
	geno.freq<-counts/tot.counts#
	allele.freq<-(geno.freq[,1]+.5*geno.freq[,2])#
#
	these.minor<-sample(1:nrow(geno.freq),3000)#
	these.major<-sample(1:nrow(geno.freq),3000)#
	ss.allele<-c(allele.freq[these.minor],1-allele.freq[these.major])#
	ss.geno<-rbind(geno.freq[these.minor,],geno.freq[these.major,c(3,2,1)])#
#
	plot(ss.allele,ss.geno[,1],xlim=c(0,1),ylim=c(0,1),col=adjustcolor("red",0.1),#
           xlab="allele frequency",ylab="genotype frequency",main=title)#
	points(ss.allele,ss.geno[,3],xlim=c(0,1),ylim=c(0,1),col=adjustcolor("blue",0.1))#
	points(ss.allele,ss.geno[,2],xlim=c(0,1),ylim=c(0,1),col=adjustcolor("green",0.1))#
	smooth=1/5#
	lines(lowess(ss.geno[,1]~ss.allele,f = smooth),col="black")#
	lines(lowess(ss.geno[,3]~ss.allele,f = smooth),col="black")#
	lines(lowess(ss.geno[,2]~ss.allele,f = smooth),col="black")#
#
	x=1:1000/1000#
	lines(x,x^2,lty=2)#
	lines(x,2*x*(1-x),lty=2)#
	lines(x,(1-x)^2,lty=2)#
	legend(x=0.3,y=1,col=c("red","blue","green",rep("black",2)),#
           legend=c("Homozygote AA","Homozygote aa","Heterozygote#
	Aa","Mean","Hardy Weinberg Expectation"),pch=c(rep(1,3),rep(NA,2)),lty=c(rep(NA,3),1,2))#
}
png(file="HGDP_HWE.png")#
plot.geno.vs.HW(file="H938.hwe_reduced",title="HGDP")#
dev.off()
png(file="HGDP_Euro_HWE.png")#
plot.geno.vs.HW(file="H938.hwe_reduced",title="HGDP Euro")#
dev.off()
png(file="HGDP_Euro_HWE.png")#
plot.geno.vs.HW(file="H938_Euro.hwe_reduced",title="HGDP Euro")#
dev.off()
head(qassoc)
setwd("../pop_strat_gwas/")
qassoc=read.table("H938_Euro_sim.pheno.qassoc",header=TRUE)#
# Produce expected p-values from the null (i.e. perfectly uniformly#
# distributed).#
nTests=length(qassoc$SNP)#
Unif=seq(1/nTests,1-1/nTests,length=nTests)#
# Sort the -log10 p-values (i.e. match on quantile)#
logUnifOrder=order(-log10(Unif),decreasing=TRUE)#
SNPorder=order(-log10(qassoc$P),decreasing=TRUE)
qassoc$P=runif(nTests)
nTests=length(qassoc$SNP)#
Unif=seq(1/nTests,1-1/nTests,length=nTests)#
# Sort the -log10 p-values (i.e. match on quantile)#
logUnifOrder=order(-log10(Unif),decreasing=TRUE)#
SNPorder=order(-log10(qassoc$P),decreasing=TRUE)#
# Plot the p-values against against each other (Note: we do for only#
# the top 150K SNPs to make the number of points plotted smaller)#
qmax=max(-log10(qassoc$P),na.rm=TRUE)#
plot(-log10(Unif[logUnifOrder][1:150e3]),-log10(qassoc$P[SNPorder][1:150e3]),pch=16,cex=0.5,xlab="-log(p)#
Expected",ylab="-log(p) Observed",,ylim=c(0,qmax));
abline(0,1);
qassoc$P=runif(nTests)
nTests=length(qassoc$SNP)#
Unif=seq(1/nTests,1-1/nTests,length=nTests)#
# Sort the -log10 p-values (i.e. match on quantile)#
logUnifOrder=order(-log10(Unif),decreasing=TRUE)#
SNPorder=order(-log10(qassoc$P),decreasing=TRUE)#
# Plot the p-values against against each other (Note: we do for only#
# the top 150K SNPs to make the number of points plotted smaller)#
qmax=max(-log10(qassoc$P),na.rm=TRUE)#
plot(-log10(Unif[logUnifOrder][1:150e3]),-log10(qassoc$P[SNPorder][1:150e3]),pch=16,cex=0.5,xlab="-log(p)#
Expected",ylab="-log(p) Observed",,ylim=c(0,qmax));abline(0,1)
head(qassoc)
